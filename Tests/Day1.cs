using Day1;

namespace Tests;

public class Day1
{
    [Theory]
    [InlineData("1abc2", 12)]
    [InlineData("pqr3stu8vwx", 38)]
    [InlineData("a1b2c3d4e5f", 15)]
    [InlineData("treb7uchet", 77)]
    public void LineMatchesDigits(string pattern, int expected)
    {
        var result = Part1.SummarizeLine(pattern);

        Assert.Equal(expected, result);
    }

    [Theory]
    [InlineData("two1nine", 29)]
    [InlineData("eightwothree", 83)]
    [InlineData("abcone2threexyz", 13)]
    [InlineData("xtwone3four", 24)]
    [InlineData("4nineeightseven2", 42)]
    [InlineData("zoneight234", 14)]
    [InlineData("7pqrstsixteen", 76)]
    [InlineData("3twombcfour", 34)]
    [InlineData("fjbbtgone5", 15)]
    [InlineData("81s", 81)]
    [InlineData("ninelkjbgsqtrx9fiveeighthljnlrdb", 98)]
    [InlineData("zdkznnkonetsstchvtxsvpfone1sjmqndvbhfg", 11)]
    [InlineData("sevenhsqnkhhcfonethreezdrjvqsmlvjrdbppjcj8eightwovn", 72)]
    [InlineData("gfbzhslvjrl1sixsevenvnpcrlhfdttmfourzr", 14)]
    [InlineData("pmkxbttdbllqqxfeightsix6fmmbltphngpmzbtsbbcq2", 82)]
    [InlineData("4gqnine", 49)]
    [InlineData("2four41", 21)]
    [InlineData("6sbgzk", 66)]
    [InlineData("sevenfsix4", 74)]
    [InlineData("lkc4", 44)]
    [InlineData("jjfvnnlfivejj1", 51)]
    [InlineData("6fourfour", 64)]
    [InlineData("ninevbmltwo69", 99)]
    [InlineData("pcg91vqrfpxxzzzoneightzt", 98)]
    [InlineData("jpprthxgjfive3one1qckhrptpqdc", 51)]
    [InlineData("mxphxfnffninethreetdj5jgknqfrxmhxfivexcxqv", 95)]
    [InlineData("three7pktwo4279z", 39)]
    [InlineData("1qcbszfgonedjcqj66929", 19)]
    [InlineData("fivesixthreeptcqjnkzgdfgzspmlvmmhn3", 53)]
    [InlineData("vm2sixseven", 27)]
    [InlineData("1nine6oneeightnine5lfrzmzh7", 17)]
    [InlineData("7onevsffj78ninejcnnvgn65", 75)]
    [InlineData("qstwonepcd3twosixrmcnxhfzv", 26)]
    [InlineData("3bnjfrfourseventwo", 32)]
    [InlineData("zpcdmvmktlrrq8sixgjtxxjpt8fcstt1", 81)]
    [InlineData("nine1gkmptbfsix87", 97)]
    [InlineData("9ldmlbchvnvgfivesixnine7zrt", 97)]
    [InlineData("45mjmblfqjvf9", 49)]
    [InlineData("onehcpgmvd837sgzgsqqrtseven", 17)]
    [InlineData("rhjfvkznjdvlgv9one8", 98)]
    [InlineData("22xkkdsvfvfourhdpchs", 24)]
    [InlineData("sixzjx5kvjbcfgcsrjndznkrtf6", 66)]
    [InlineData("1fourmk8three3seven", 17)]
    [InlineData("4716lpzhdcbone6seventwo", 42)]
    [InlineData("443two27", 47)]
    [InlineData("9sgtwoseven6", 96)]
    [InlineData("pjtbhxchqfseven18tznxpbsppk", 78)]
    [InlineData("9eightwonkt", 92)]
    [InlineData("htsgxmrfsevenone8qjxhjsixnbsvcf5", 75)]
    [InlineData("5jmnjnnfsfoursevenprtjzdxmxj7six", 56)]
    [InlineData("dthreenrzonefourcxfrzsvtfz9xb", 39)]
    [InlineData("6kvfn", 66)]
    [InlineData("vlfbzpbpseven8tspgqfdzkmfivefourzjzdbxgtvx", 74)]
    [InlineData("2rfqtfttqzkkzdjbjxnx51xrzczxmfmc2two", 22)]
    [InlineData("3fnncmsdz1bnxvlfxng", 31)]
    [InlineData("seven789bgzpszjd3", 73)]
    [InlineData("6four8gjsmbztmp", 68)]
    [InlineData("sjvmmb9h", 99)]
    [InlineData("6jqttjkpjc145", 65)]
    [InlineData("9threedzjjqnhrngktscfmc", 93)]
    [InlineData("5onesix", 56)]
    [InlineData("nine2onelpzhtrbninexkgtjqg", 99)]
    [InlineData("6nined", 69)]
    [InlineData("29xzfour7seven9pcvdbcgvtv", 29)]
    [InlineData("hjdtscdc6twotwosixsevensix9six", 66)]
    [InlineData("stmpvhnssixtwoffnhpn25", 65)]
    [InlineData("45fourbpsghkqxqm9fmvhssbntdtwo64", 44)]
    [InlineData("nine835four", 94)]
    [InlineData("leightwothreesevenlhlmqcgcpfour9", 89)]
    [InlineData("fgsfsqgkcctzcltpvpjhlb5eight4one", 51)]
    [InlineData("four9four184five9", 49)]
    [InlineData("67seven7twobdcltwonenh", 61)]
    [InlineData("nsdbone5two16", 16)]
    [InlineData("sixsix3jxfctsrsvfcrpbxtthmspdlqqrnckxtngnx", 63)]
    [InlineData("fxftk3svcczpknmfourhlndmg", 34)]
    [InlineData("eight4sevenmrlkcqx4three", 83)]
    [InlineData("7ninerpcrqt46gtnlzlmknine", 79)]
    [InlineData("hppggtwohcckscs5eighttwo", 22)]
    [InlineData("phzdqznlbkthreephllsb32eighttwo9six", 36)]
    [InlineData("6four8fxcmngbnine3", 63)]
    [InlineData("seven6five23seven", 77)]
    [InlineData("9seven6bfqkxsjvcpninehmprgsldb", 99)]
    [InlineData("tffjstchhs3rnjsmlnr3sevenlkjzkrdg3mmlgbgnnjzoneightm", 38)]
    [InlineData("913", 93)]
    [InlineData("lvsqbjjsonethreeone864ncrlpdghgkfive", 15)]
    [InlineData("fvlmhpxcrktwo3ninejm6eightxmc", 28)]
    [InlineData("sevenjbnc2zvxnr4", 74)]
    [InlineData("mqjztddmfmnskhlvvp2", 22)]
    [InlineData("six1fivesixsevenninenine", 69)]
    [InlineData("vpbpbsixsqvxfvf6", 66)]
    [InlineData("6jjqln83one", 61)]
    [InlineData("3dbone3", 33)]
    [InlineData("ssczbsgp2fourdknjszzbvtlgtdplgplrnznmhdfivefdd", 25)]
    [InlineData("threesevenqctdslt457", 37)]
    [InlineData("eightthree9eightfiveninetzhmhg", 89)]
    [InlineData("bsmzhmrm1eight5", 15)]
    [InlineData("pzhpleighttbhhfxfdgprfjsxrzl7sixsixjgghqbr", 86)]
    [InlineData("one5onecfdbpvxbdlmmdbxqdlbldjbz8", 18)]
    [InlineData("qxsbz4rjdgcfsvmqthreeone3mtwo", 42)]
    [InlineData("13zls3", 13)]
    [InlineData("zpjlgbjrkl6four5", 65)]
    [InlineData("264sevenfive", 25)]
    [InlineData("413vhsevennpbnine", 49)]
    [InlineData("gn9sevenhhhnblflxkeightnine", 99)]
    [InlineData("hgdfdsdb5seven", 57)]
    [InlineData("eightczrstqtcjmrpbhhdxrflkcjpsdjbskfvzdglt6nine", 89)]
    [InlineData("jrgr15mzkpt5", 15)]
    [InlineData("lxzlvmrdcvglcjsjzxm3748hjlvtgz", 38)]
    [InlineData("ninekxcqcpztqfoureightsrdhtmnbpsqkc5", 95)]
    [InlineData("vxfdkmp4fourtwopdpfmcqnrqkmvf", 42)]
    [InlineData("prkkmcccpone4qthree", 13)]
    [InlineData("lxxqfourkrttdqlhkjhp5", 45)]
    [InlineData("five7three", 53)]
    [InlineData("sixmljbdl2seven8six3ffrfc", 63)]
    [InlineData("6threexgtvlxthree5fiveseven", 67)]
    [InlineData("three86pztxhlcfour", 34)]
    [InlineData("eightfiveeight79", 89)]
    [InlineData("5ljzqvbgknk4", 54)]
    [InlineData("seven4cnrxrv9", 79)]
    [InlineData("brtwone8jsvbpstpmlbrxrjfivehhhqbvk", 25)]
    [InlineData("9bxtjskxkhfmz4seven", 97)]
    public void LineMatchesDigitsAndSpelledValues(string pattern, int expected)
    {
        var result = Part2.SummarizeLine(pattern);

        Assert.Equal(expected, result);
    }
}